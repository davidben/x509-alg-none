



Limited Additional Mechanisms for PKIX and SMIME             D. Benjamin
Internet-Draft                                                Google LLC
Updates: 5280 (if approved)                                  27 May 2025
Intended status: Standards Track                                        
Expires: 28 November 2025


                      Unsigned X.509 Certificates
                 draft-ietf-lamps-x509-alg-none-latest

Abstract

   This document defines a placeholder X.509 signature algorithm that
   may be used in contexts where the consumer of the certificate is not
   expected to verify the signature.

About This Document

   This note is to be removed before publishing as an RFC.

   The latest revision of this draft can be found at
   https://davidben.github.io/x509-alg-none/draft-ietf-lamps-x509-alg-
   none.html.  Status information for this document may be found at
   https://datatracker.ietf.org/doc/draft-ietf-lamps-x509-alg-none/.

   Discussion of this document takes place on the Limited Additional
   Mechanisms for PKIX and SMIME Working Group mailing list
   (mailto:spasm@ietf.org), which is archived at
   https://mailarchive.ietf.org/arch/browse/spasm/.  Subscribe at
   https://www.ietf.org/mailman/listinfo/spasm/.

   Source for this draft and an issue tracker can be found at
   https://github.com/davidben/x509-alg-none.

Status of This Memo

   This Internet-Draft is submitted in full conformance with the
   provisions of BCP 78 and BCP 79.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF).  Note that other groups may also distribute
   working documents as Internet-Drafts.  The list of current Internet-
   Drafts is at https://datatracker.ietf.org/drafts/current/.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   This Internet-Draft will expire on 28 November 2025.

Copyright Notice

   Copyright (c) 2025 IETF Trust and the persons identified as the
   document authors.  All rights reserved.

   This document is subject to BCP 78 and the IETF Trust's Legal
   Provisions Relating to IETF Documents (https://trustee.ietf.org/
   license-info) in effect on the date of publication of this document.
   Please review these documents carefully, as they describe your rights
   and restrictions with respect to this document.  Code Components
   extracted from this document must include Revised BSD License text as
   described in Section 4.e of the Trust Legal Provisions and are
   provided without warranty as described in the Revised BSD License.

Table of Contents

   1.  Introduction
   2.  Conventions and Definitions
   3.  Constructing Unsigned Certificates
   4.  Consuming Unsigned Certificates
   5.  Security Considerations
   6.  IANA Considerations
   7.  References
     7.1.  Normative References
     7.2.  Informative References
   Appendix A.  ASN.1 Module
   Acknowledgements
   Author's Address

1.  Introduction

   An X.509 certificate [RFC5280] relates two entities in the PKI:
   information about a subject and a proof from an issuer.  Viewing the
   PKI as a graph with entities as nodes, as in [RFC4158], a certificate
   is an edge between the subject and issuer.

   In some contexts, an application needs standalone subject information
   instead of a certificate.  In the graph model, the application needs
   a node, not an edge.  For example, certification path validation
   (Section 6 of [RFC5280]) begins at a trust anchor, or root
   certification authority (root CA).  The application trusts this trust
   anchor information out-of-band and does not require an issuer's
   signature.

   X.509 does not define a structure for this scenario.  Instead, X.509
   trust anchors are often represented with "self-signed" certificates,
   where the subject's key signs over itself.  Other formats, such as
   [RFC5914] exist to convey trust anchors, but self-signed certificates
   remain widely used.

   Additionally, some TLS [RFC8446] server deployments use self-signed
   end entity certificates when they do not intend to present a CA-
   issued identity, instead expecting the relying party to authenticate
   the certificate out-of-band, e.g. via a known fingerprint.

   These self-signatures typically have no security value, aren't
   checked by the receiver, and only serve as placeholders to meet
   syntactic requirements of an X.509 certificate.

   Computing signatures as placeholders has some drawbacks:

   *  Post-quantum signature algorithms are large, so including a self-
      signature significantly increases the size of the payload.

   *  If the subject is an end entity, rather than a CA, computing an
      X.509 signature risks cross-protocol attacks with the intended use
      of the key.

   *  It is ambiguous whether such a self-signature requires the CA bit
      in basic constraints or keyCertSign in key usage.  If the key is
      intended for a non-X.509 use, asserting those capabilities is an
      unnecessary risk.

   *  If the subject is an end entity, and the end entity's key is not a
      signing key (e.g. a KEM key), there is no valid signature
      algorithm to use with the key.

   This document defines a profile for unsigned X.509 certificates,
   which may be used when the certificate is used as a container for
   subject information, without any specific issuer.

2.  Conventions and Definitions

   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
   "OPTIONAL" in this document are to be interpreted as described in BCP
   14 [RFC2119] [RFC8174] when, and only when, they appear in all
   capitals, as shown here.

3.  Constructing Unsigned Certificates

   This document defines the id-alg-unsigned object identifier (OID)
   under the OID arc defined in [RFC8411]:

     id-alg-unsigned OBJECT IDENTIFIER ::= {1 3 6 1 5 5 7 6 36}

   To construct an unsigned X.509 certificate, the sender MUST set the
   Certificate's signatureAlgorithm and TBSCertificate's signature
   fields each to an AlgorithmIdentifier with algorithm id-alg-unsigned.
   The parameters for id-alg-unsigned MUST be omitted.  The
   Certificate's signatureValue field MUST be a BIT STRING of length
   zero.

   An unsigned certificate takes the place of a self-signed certificate
   in scenarios where the application only requires subject information.
   It has no issuer, so some requirements in the profile defined in
   [RFC5280] cannot meaningfully be applied.  However, the application
   may have pre-existing requirements derived from [X.509] and
   [RFC5280], so senders MAY construct the certificate as if it were a
   self-signed certificate, if needed for interoperability.

   In particular, the following fields describe a certificate's issuer:

   *  issuer (Section 4.1.2.4 of [RFC5280])

   *  issuerUniqueID (Section 4.1.2.8 of [RFC5280])

   *  authority key identifier (Section 4.2.1.1 of [RFC5280])

   *  issuer alternative name (Section 4.2.1.7 of [RFC5280])

   The issuer field is not optional, and both [X.509] and
   Section 4.1.2.4 of [RFC5280] forbid empty issuers, so such a value
   may not be interoperable with existing applications.

   Senders MAY use a short placeholder issuer consisting of a single
   relative distinguished name, with a single attribute of type id-alg-
   unsigned and value a zero-length UTF8String.  This placeholder name,
   in the string representation of [RFC2253], is:

   1.3.6.1.5.5.7.6.36=

   Alternatively, if the subject is not empty, senders MAY use the
   subject field, as in a self-signed certificate.  This may be useful
   in applications that, for example, expect trust anchors to have
   matching issuer and subject.

   Senders MUST omit the issuerUniqueID field, as it is optional, not
   applicable, and already forbidden by Section 4.1.2.8 of [RFC5280].

   Senders SHOULD omit the authority key identifier and issuer
   alternative name extensions.  Section 4.2.1.1 of [RFC5280] requires
   CA certificates to include authority key identifier, but includes an
   exception for self-signed certificates used when distributing a
   public key.  This document updates [RFC5280] to also permit omitting
   authority key identifier in unsigned certificates.

   Some extensions reflect whether the subject is a CA or an end entity:

   *  key usage (Section 4.2.1.3 of [RFC5280])

   *  basic constraints (Section 4.2.1.9 of [RFC5280])

   Senders SHOULD fill in these values to reflect the subject.  In
   particular, an unsigned end entity certificate does not issue itself,
   so it SHOULD NOT assert the keyCertSign key usage bit, and it SHOULD
   either omit the basic constraints extension or set the cA boolean to
   FALSE.

4.  Consuming Unsigned Certificates

   X.509 signatures of type id-alg-unsigned are always invalid.  This
   contrasts with [JWT].  When processing X.509 certificates without
   verifying signatures, receivers MAY accept id-alg-unsigned.  When
   verifying X.509 signatures, receivers MUST reject id-alg-unsigned.
   In particular, X.509 validators MUST NOT accept id-alg-unsigned in
   the place of a signature in the certification path.

   X.509 applications must already account for unknown signature
   algorithms, so applications are RECOMMENDED to satisfy these
   requirements by ignoring this document.  An unmodified X.509
   validator will not recognize id-alg-unsigned and is thus already
   expected to reject it in the certification path.  Conversely, in
   contexts where an X.509 application was ignoring the self-signature,
   id-alg-unsigned will also be ignored, but more efficiently.

   In other contexts, applications may require modifications.  For
   example, an application that uses self-signedness in interpreting its
   local configuration may need to modify its configuration model or
   user interface before using an unsigned certificate as a trust
   anchor.

5.  Security Considerations

   If an application uses a self-signature when constructing a subject-
   only certificate for a non-X.509 key, the X.509 signature payload and
   those of the key's intended use may collide.  The self-signature
   might then be used as part of a cross-protocol attack.  Using id-alg-
   unsigned avoids a single key being used for both X.509 and the end-
   entity protocol, eliminating this risk.

   If an application accepts id-alg-unsigned as part of a certification
   path, or in any other context where it is necessary to verify the
   X.509 signature, the signature check would be bypassed.  Thus,
   Section 4 prohibits this and recommends that applications not treat
   id-alg-unsigned differently from any other previously unrecognized
   signature algorithm.  Non-compliant applications that instead accept
   id-alg-unsigned as a valid signature risk of vulnerabilities
   analogous to [JWT].

6.  IANA Considerations

   IANA is requested to create the following entry in the SMI Security
   for PKIX Module Identifier registry, defined by [RFC7299]:

            +=========+=========================+============+
            | Decimal | Description             | References |
            +=========+=========================+============+
            | TBD     | id-mod-algUnsigned-2025 | [this-RFC] |
            +---------+-------------------------+------------+

                                 Table 1

   IANA is requested to add the following entry to the "SMI Security for
   PKIX Algorithms" registry [RFC7299]:

                +=========+=================+============+
                | Decimal | Description     | References |
                +=========+=================+============+
                | 36      | id-alg-unsigned | [this-RFC] |
                +---------+-----------------+------------+

                                 Table 2

7.  References

7.1.  Normative References

   [RFC2119]  Bradner, S., "Key words for use in RFCs to Indicate
              Requirement Levels", BCP 14, RFC 2119,
              DOI 10.17487/RFC2119, March 1997,
              <https://www.rfc-editor.org/rfc/rfc2119>.

   [RFC5280]  Cooper, D., Santesson, S., Farrell, S., Boeyen, S.,
              Housley, R., and W. Polk, "Internet X.509 Public Key
              Infrastructure Certificate and Certificate Revocation List
              (CRL) Profile", RFC 5280, DOI 10.17487/RFC5280, May 2008,
              <https://www.rfc-editor.org/rfc/rfc5280>.

   [RFC7299]  Housley, R., "Object Identifier Registry for the PKIX
              Working Group", RFC 7299, DOI 10.17487/RFC7299, July 2014,
              <https://www.rfc-editor.org/rfc/rfc7299>.

   [RFC8174]  Leiba, B., "Ambiguity of Uppercase vs Lowercase in RFC
              2119 Key Words", BCP 14, RFC 8174, DOI 10.17487/RFC8174,
              May 2017, <https://www.rfc-editor.org/rfc/rfc8174>.

   [RFC8411]  Schaad, J. and R. Andrews, "IANA Registration for the
              Cryptographic Algorithm Object Identifier Range",
              RFC 8411, DOI 10.17487/RFC8411, August 2018,
              <https://www.rfc-editor.org/rfc/rfc8411>.

7.2.  Informative References

   [JWT]      Sanderson, J., "How Many Days Has It Been Since a JWT
              alg:none Vulnerability?", 9 October 2024,
              <https://www.howmanydayssinceajwtalgnonevuln.com/>.

   [RFC2253]  Wahl, M., Kille, S., and T. Howes, "Lightweight Directory
              Access Protocol (v3): UTF-8 String Representation of
              Distinguished Names", RFC 2253, DOI 10.17487/RFC2253,
              December 1997, <https://www.rfc-editor.org/rfc/rfc2253>.

   [RFC4158]  Cooper, M., Dzambasow, Y., Hesse, P., Joseph, S., and R.
              Nicholas, "Internet X.509 Public Key Infrastructure:
              Certification Path Building", RFC 4158,
              DOI 10.17487/RFC4158, September 2005,
              <https://www.rfc-editor.org/rfc/rfc4158>.

   [RFC5914]  Housley, R., Ashmore, S., and C. Wallace, "Trust Anchor
              Format", RFC 5914, DOI 10.17487/RFC5914, June 2010,
              <https://www.rfc-editor.org/rfc/rfc5914>.

   [RFC8446]  Rescorla, E., "The Transport Layer Security (TLS) Protocol
              Version 1.3", RFC 8446, DOI 10.17487/RFC8446, August 2018,
              <https://www.rfc-editor.org/rfc/rfc8446>.

   [X.509]    ITU-T, "Information technology - Open Systems
              Interconnection – The Directory: Public-key and attribute
              certificate frameworks", ISO/IEC 9594-8:2020 , October
              2019.

Appendix A.  ASN.1 Module

   SignatureAlgorithmNone
     { iso(1) identified-organization(3) dod(6) internet(1)
       security(5) mechanisms(5) pkix(7) id-mod(0)
       id-mod-algUnsigned-2025(TBD) }

   DEFINITIONS IMPLICIT TAGS ::=
   BEGIN

   IMPORTS
     SIGNATURE-ALGORITHM
     FROM AlgorithmInformation-2009  -- in [RFC5912]
       { iso(1) identified-organization(3) dod(6) internet(1)
         security(5) mechanisms(5) pkix(7) id-mod(0)
         id-mod-algorithmInformation-02(58) } ;

   -- Unsigned Signature Algorithm

   id-alg-unsigned OBJECT IDENTIFIER ::= { iso(1)
      identified-organization(3) dod(6) internet(1) security(5)
      mechanisms(5) pkix(7) alg(6) 36 }

   sa-unsigned SIGNATURE-ALGORITHM ::= {
      IDENTIFIER id-alg-unsigned
      PARAMS ARE absent
   }

   END

Acknowledgements

   Thanks to Bob Beck, Nick Harper, and Sophie Schmieg for reviewing an
   early iteration of this document.  Thanks to Alex Gaynor for
   providing a link to cite for [JWT].  Thanks to Russ Housley for
   additional input.

Author's Address

   David Benjamin
   Google LLC
   Email: davidben@google.com
