



Network Working Group                                        D. Benjamin
Internet-Draft                                                Google LLC
Intended status: Standards Track                         10 October 2024
Expires: 13 April 2025


                      Unsigned X.509 Certificates
                  draft-davidben-x509-alg-none-latest

Abstract

   This document defines a placeholder X.509 signature algorithm that
   may be used in contexts where the consumer of the certificate does
   not intend to verify the signature.

About This Document

   This note is to be removed before publishing as an RFC.

   The latest revision of this draft can be found at
   https://davidben.github.io/x509-alg-none/draft-davidben-x509-alg-
   none.html.  Status information for this document may be found at
   https://datatracker.ietf.org/doc/draft-davidben-x509-alg-none/.

   Source for this draft and an issue tracker can be found at
   https://github.com/davidben/x509-alg-none.

Status of This Memo

   This Internet-Draft is submitted in full conformance with the
   provisions of BCP 78 and BCP 79.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF).  Note that other groups may also distribute
   working documents as Internet-Drafts.  The list of current Internet-
   Drafts is at https://datatracker.ietf.org/drafts/current/.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   This Internet-Draft will expire on 13 April 2025.

Copyright Notice

   Copyright (c) 2024 IETF Trust and the persons identified as the
   document authors.  All rights reserved.

   This document is subject to BCP 78 and the IETF Trust's Legal
   Provisions Relating to IETF Documents (https://trustee.ietf.org/
   license-info) in effect on the date of publication of this document.
   Please review these documents carefully, as they describe your rights
   and restrictions with respect to this document.  Code Components
   extracted from this document must include Revised BSD License text as
   described in Section 4.e of the Trust Legal Provisions and are
   provided without warranty as described in the Revised BSD License.

Table of Contents

   1.  Introduction
   2.  Conventions and Definitions
   3.  Constructing Unsigned Certificates
   4.  Consuming Unsigned Certificates
   5.  Security Considerations
   6.  IANA Considerations
   7.  References
     7.1.  Normative References
     7.2.  Informative References
   Acknowledgements
   Author's Address

1.  Introduction

   An X.509 certificate [RFC5280] relates two entities in the PKI:
   information about a subject and a proof from an issuer.  Some
   applications, however, only require subject information.  For
   example, an X.509 trust anchor is described by information about the
   subject (a root certification authority, or root CA).  The relying
   party trusts this information out-of-band and does not require an
   issuer's signature.

   X.509 does not define such a structure.  Instead, X.509 trust anchors
   often use "self-signed" certificates, where the CA's key is used to
   sign the certificate.  Other formats, such as [RFC5914] exist to
   convey trust anchors, but self-signed certificates remain widely
   used.  Additionally, some TLS [RFC8446] server deployments use self-
   signed certificates when they do not intend to present a CA-issued
   identity, instead expecting the relying party to authenticate the
   certificate out-of-band, e.g. via a known fingerprint.

   These self-signatures typically have no security value, aren't
   checked by the receiver, and only serve as placeholders to meet
   syntactic requirements of an X.509 certificate.

   Computing signatures as placeholders has some drawbacks:

   *  Post-quantum signature algorithms are large, so including a self-
      signature significantly increases the size of the payload.

   *  If the subject is an end entity, rather than a CA, computing an
      X.509 signature risks cross-protocol attacks with the intended use
      of the key.

   *  It is ambiguous whether such a self-signature requires the CA bit
      in basic constraints or keyCertSign in key usage.  If the key is
      intended for a non-X.509 use, asserting those capabilities is an
      unnecessary risk.

   *  If end entity's key is not a signing key (e.g. a KEM key), there
      is no valid signature algorithm to use with the key.

   This document defines a profile for unsigned X.509 certificates,
   which may be used when the certificate is used as a container for
   subject information, without any specific issuer.

2.  Conventions and Definitions

   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
   "OPTIONAL" in this document are to be interpreted as described in BCP
   14 [RFC2119] [RFC8174] when, and only when, they appear in all
   capitals, as shown here.

3.  Constructing Unsigned Certificates

   This document defines the id-unsigned OID:

   id-unsigned OBJECT IDENTIFER ::= { TBD }

   To construct an unsigned X.509 certificate, the sender MUST set the
   Certificate's signatureAlgorithm and TBSCertificate's signature
   fields each to an AlgorithmIdentifier with algorithm id-unsigned and
   omitted parameters.  The Certificate's signatureValue field MUST be a
   BIT STRING of length zero.

4.  Consuming Unsigned Certificates

   Signatures of type id-unsigned are always invalid.  This contrasts
   with [JWT].  When processing X.509 certificates without verifying
   signatures, receivers MAY accept id-unsigned.  When verifying X.509
   signatures, receivers MUST reject id-unsigned.  In particular, X.509
   validators MUST NOT accept id-unsigned in the place of a signature in
   the certification path.

   X.509 applications must already account for unknown signature
   algorithms, so applications are RECOMMENDED to satisfy these
   requirements by ignoring this document.  An unmodified X.509
   validator will not recognize id-unsigned and is thus already expected
   to reject it in the certification path.  Conversely, in contexts
   where an X.509 application was ignoring the self-signature, id-
   unsigned will also be ignored, but more efficiently.

5.  Security Considerations

   If an application uses a self-signature when constructing a subject-
   only certificate for a non-X.509 key, the X.509 signature payload and
   those of the key's intended use may collide.  The self-signature
   might then be used as part of a cross-protocol attack.  Using id-
   unsigned avoids a single key being used for both X.509 and the end-
   entity protocol, eliminating this risk.

   If an application accepts id-unsigned as part of a certification
   path, or in any other context where it is necessary to verify the
   X.509 signature, the signature check would be bypassed.  Thus,
   Section 4 prohibits this and recommends that applications not treat
   id-unsigned differently from any other previously unrecognized
   signature algorithm.  Non-compliant applications that instead accept
   id-unsigned as a valid signature risk of vulnerabilities analogous to
   [JWT].

6.  IANA Considerations

   This document has no IANA actions.

7.  References

7.1.  Normative References

   [RFC2119]  Bradner, S., "Key words for use in RFCs to Indicate
              Requirement Levels", BCP 14, RFC 2119,
              DOI 10.17487/RFC2119, March 1997,
              <https://www.rfc-editor.org/rfc/rfc2119>.

   [RFC5280]  Cooper, D., Santesson, S., Farrell, S., Boeyen, S.,
              Housley, R., and W. Polk, "Internet X.509 Public Key
              Infrastructure Certificate and Certificate Revocation List
              (CRL) Profile", RFC 5280, DOI 10.17487/RFC5280, May 2008,
              <https://www.rfc-editor.org/rfc/rfc5280>.

   [RFC8174]  Leiba, B., "Ambiguity of Uppercase vs Lowercase in RFC
              2119 Key Words", BCP 14, RFC 8174, DOI 10.17487/RFC8174,
              May 2017, <https://www.rfc-editor.org/rfc/rfc8174>.

7.2.  Informative References

   [JWT]      Sanderson, J., "How Many Days Has It Been Since a JWT
              alg:none Vulnerability?", 9 October 2024,
              <https://www.howmanydayssinceajwtalgnonevuln.com/>.

   [RFC5914]  Housley, R., Ashmore, S., and C. Wallace, "Trust Anchor
              Format", RFC 5914, DOI 10.17487/RFC5914, June 2010,
              <https://www.rfc-editor.org/rfc/rfc5914>.

   [RFC8446]  Rescorla, E., "The Transport Layer Security (TLS) Protocol
              Version 1.3", RFC 8446, DOI 10.17487/RFC8446, August 2018,
              <https://www.rfc-editor.org/rfc/rfc8446>.

Acknowledgements

   Thanks to Bob Beck, Nick Harper, and Sophie Schmieg for reviewing an
   early iteration of this document.  Thanks to Alex Gaynor for
   providing a link to cite for [JWT].

Author's Address

   David Benjamin
   Google LLC
   Email: davidben@google.com
